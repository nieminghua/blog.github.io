<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on NieMinghua-blog</title>
    <link>https://blog.github.io/tags/python/</link>
    <description>Recent content in python on NieMinghua-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 21:59:28 +0800</lastBuildDate>
    
	<atom:link href="https://blog.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>时间格式转换</title>
      <link>https://blog.github.io/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 13 Jul 2020 21:59:28 +0800</pubDate>
      
      <guid>https://blog.github.io/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</guid>
      <description>时间格式转换   标准时间转换为格式化时间   Mon Jul 13 2020 20:20:00 GMT+0800 (中国标准时间)  const resDate = value.getFullYear() + &#39;-&#39; + this.p((value.getMonth() + 1)) + &#39;-&#39; + this.p(value.getDate()); //转换时分秒 const resTime = this.p(value.getHours()) + &#39;:&#39; + this.p(value.getMinutes()) + &#39;:&#39; + this.p(value.getSeconds()); console.log(resDate + &#39; &#39; + resTime);  ​	转换后
2020-07-13 20:20:00   格式化时间转为时间戳   # 将格式化后的时间转换为time.time()时间戳 def str_to_stamp(str=None, format=&#39;%Y-%m-%d %H:%M:%S&#39;): # 格式化好的时间转时间戳的,如果不传格式化好的时间，就返回当前的时间戳 times = int(time.mktime(time.strptime(str, format))) return times a = str_to_stamp(&#39;2020-07-13 20:20:00&#39;) print(a) &amp;gt;&amp;gt;&amp;gt;1594642800   秒数转时间 秒数转时间格式</description>
    </item>
    
    <item>
      <title>Celery定时爬取数据并发送到钉钉机器人</title>
      <link>https://blog.github.io/celery%E5%AE%9A%E6%97%B6%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA/</link>
      <pubDate>Sun, 21 Jun 2020 14:57:18 +0800</pubDate>
      
      <guid>https://blog.github.io/celery%E5%AE%9A%E6%97%B6%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%91%E9%80%81%E5%88%B0%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid>
      <description>python配合Scrapy框架爬取数据定时发送给钉钉群机器人 scrapy和celery的使用之前博客有写到.
传送门:celery
传送门:scrapy
设置自定义钉钉机器人
传送门:钉钉机器人
步骤也很简单,直接上代码
from celery.task import task # 自定义异步任务 @task() def async_test(): import json import time import os # 开始执行爬虫 os.system(&#39;cd../scrapy/hellospider/ &amp;amp;&amp;amp; scrapy crawl myspider&#39;) time_now = time.strftime(&#39;%Y-%m-%d %H&#39;, time.localtime(time.time())) # 解析数据 with open(&#39;D:\python\python8\scrapy\jtianqi.json&#39;, encoding=&#39;utf-8&#39;)as f: new_list = json.load(f) weather = new_list[&#39;weather&#39;][0] temperature_up = new_list[&#39;temperature_up&#39;][0] temperature_low = new_list[&#39;temperature_low&#39;][0] wind = new_list[&#39;wind&#39;][0] # 测试输出 print(&amp;quot;天气:%s,最高气温:%s,最低气温:%s,风力:%s&amp;quot; % ( weather, temperature_up, temperature_low, wind )) # 机器人 import time import hmac import hashlib import base64 import urllib.</description>
    </item>
    
    <item>
      <title>集中高并发测试</title>
      <link>https://blog.github.io/%E9%9B%86%E4%B8%AD%E9%AB%98%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 18 Jun 2020 17:28:55 +0800</pubDate>
      
      <guid>https://blog.github.io/%E9%9B%86%E4%B8%AD%E9%AB%98%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</guid>
      <description>集中高并发测试 在开发中可能会遇到一些高并发的情况,我们需要测试一下我们的服务器或者代码的bug.
  使用maxpp 首先进入maxpp的bin目录下
D:\MAXPP\apache\bin&amp;gt;  -c为每秒发送的次数,-n为一共多少次请求. 后边跟测试的地址
如下边的命令,就是一共500次请求,一秒请求100次.5秒请求完毕
ab -c100 -n500 http://127.0.0.1:8000/    自写多线程脚本测试 import threading import requests def get_http(): # 目标地址 res = requests.get(&#39;http://127.0.0.1:8000/sckill/?id=1&#39;) return res threads = [] # 每秒访问次数 99 for x in range(99): t1 = threading.Thread(target=get_http) threads.append(t1) for t in threads: t.start()    </description>
    </item>
    
    <item>
      <title>GIL全局解释器锁</title>
      <link>https://blog.github.io/gil%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/</link>
      <pubDate>Thu, 18 Jun 2020 17:27:43 +0800</pubDate>
      
      <guid>https://blog.github.io/gil%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/</guid>
      <description>GIL 全局解释器锁 (英语:global interpreter lock 缩写是GIL) 在理解GIL之前,先理解一下并发与并行的概念: 并发:cpu交替执行.当任务数大于cpu核数时,cpu会交替执行这两个任务.但不是同时执行,由于cpu执行的速度过快,给人的感觉像是在&#39;同时执行&amp;rsquo;.
并行:多个cpu执行多个任务.各自cpu运行着各自的任务肩并肩一起前行.
并发和并行同属于多任务,目的是提高cpu的使用效率.但是要明白,一个cpu永远不可能同时执行多个任务.可以在随机分配的时间内交替执行.(时间片轮转调度算法)
Guido van Rossum（吉多·范罗苏姆）创建python时就只考虑到单核cpu，解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁， 于是有了GIL这把超级大锁。因为cpython解析只允许拥有GIL全局解析器锁才能运行程序，这样就保证了保证同一个时刻只允许一个线程可以使用cpu。由于大量的程序开发者接收了这套机制,现在代码量越来越多,已经不容易通过c代码去解决这个问题。
什么是GIL? 每个线程在执行时都需要先获取GIL,保证同一时刻只有一个线程在使用cpu,也就是说多线程并不是真正意义上的同时执行.
GIL 是用于同步线程的一种机制,作用就是在任何时刻只能有一个线程在执行.
即使有多个核心处理器,使用GIL解释器锁保证同一时刻只有一个线程在运行
如何解决GIL锁的问题.  更换cpython为jpython(不建议,更换之后讲不能在使用C语言的拓展包.) 使用多进程完成多线程的任务（资源占用会多一些） .在使用多线程可以使用c语言去实现  关于GIL面试高发题   问题1 什么时候会释放GIL锁
答: 1. 遇到像i/o操作这种,会有时间空闲情况,造成CPU空闲,会释放GIL锁
​	2.会有一个专门的ticks进行计数,一旦ticks数值达到100,这个时候就会释放GIL锁,线程之间开始竞争gil锁.(说明:ticks这个数值可以进行设置来延长或缩减获得GIL锁的线程使用cpu的时间.)
  问题2 互斥锁和GIL锁的关系
  GIL锁:保证同一时刻只有一个线程能使用到cpu
互斥锁: 多线程时,保证修改共享数据时有序的修改,不会产生数据的混乱
如下场景:
 多线程运行,假设线程1获取了GIL可以使用cpu.这时线程1获取了互斥锁lock.线程1可以修改共享变量date数据 线程1在修改date数据前发生了i/o操作或者是ticks计数满100,这个时候GIL需要被让出,GIL可以被竞争了 线程1和线程2开始竞争GIL(如果线程1是因为i/o阻塞让出了GIL,那线程2必定能拿到GIL,如果是因为ticks计数满100,则公平竞争) 假设线程2拿到了GIL,它要去修改共享变量date数据.由于数据还被线程1互斥锁lock加锁中.所以线程2无法更改date,线程2让出GIL,再次开始竞争. 线程1抢到了GIL,它本身就自带着互斥锁lock, 所以成功修改了数据,修改完成后释放了互斥锁lock, 线程2在获取到GIL和lock之后才可以对date进行修改. 以上就是互斥锁与GIL的关系.  </description>
    </item>
    
    <item>
      <title>邮箱验证码注册</title>
      <link>https://blog.github.io/%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B3%A8%E5%86%8C/</link>
      <pubDate>Thu, 28 May 2020 19:44:43 +0800</pubDate>
      
      <guid>https://blog.github.io/%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B3%A8%E5%86%8C/</guid>
      <description>注册邮箱验证demo   打开邮箱&amp;ndash;&amp;gt;设置&amp;ndash;&amp;gt;账户&amp;ndash;&amp;gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务把IMAP/SMTP服务开启(要记住授权码)   2. ### 定义发送邮箱方法
import smtplib from email.mime.text import MIMEText from email.utils import formataddr # 定义参数 my_mail = &#39;邮箱地址@qq.com&#39; # 授权码 my_pass = &amp;quot;邮箱设置时分配的授权码&amp;quot; # 定义发送邮箱的方法 def SendMail(subject, content, mailaddr): # 声明邮件对象 msg = MIMEText(content, &amp;quot;plain&amp;quot;, &#39;utf-8&#39;) # 设置发送对象 msg[&#39;From&#39;] = formataddr([&#39;在线教育平台&#39;, my_mail]) # 设置收件方对象 msg[&#39;To&#39;] = formataddr([&#39;尊敬的用户&#39;, mailaddr]) # 设置标题 msg[&#39;Subject&#39;] = subject # 设置smtp服务器 server = smtplib.SMTP_SSL(&#39;smtp.qq.com&#39;, 465) # 登录邮箱 server.login(my_mail, my_pass) # 发送邮件 (发件人 发给谁 发送内容) server.</description>
    </item>
    
    <item>
      <title>Jwt</title>
      <link>https://blog.github.io/jwt/</link>
      <pubDate>Sun, 10 May 2020 18:27:42 +0800</pubDate>
      
      <guid>https://blog.github.io/jwt/</guid>
      <description>jwt ###JSON Web Token（JWT）是目前最流行的跨域身份验证解决方案
  组成部分如下    跨域身份验证    代码 import jwt # 生成jwt 三个参数,载荷(要加密的数据),签名哈希(盐值),指定加密算法 encode_jwt = jwt.encode({&#39;uid&#39;: 2}, &#39;12345&#39;, algorithm=&#39;HS256&#39;) # 转码 encode_str = str(encode_jwt, &#39;utf-8&#39;) print(encode_str) # 解密 三个参数,载荷(要解密的数据),签名哈希(盐值),指定加密算法 decode_jwt = jwt.decode( encode_str, &#39;12345&#39;, algorithms=[&#39;HS256&#39;]) print(decode_jwt) &amp;gt;&amp;gt;&amp;gt;	eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjJ9.6dJKZwsIg-5ctVuUCY6rVOLaBF_O4LmEP66_qZksHoo &amp;gt;&amp;gt;&amp;gt;	{&#39;uid&#39;: 2}    </description>
    </item>
    
    <item>
      <title>Django压缩图片并添加水印</title>
      <link>https://blog.github.io/django%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</link>
      <pubDate>Wed, 29 Apr 2020 17:01:12 +0800</pubDate>
      
      <guid>https://blog.github.io/django%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</guid>
      <description>压缩图片并添加水印demo   导入我们需要的库 # 导入图片库 # 绘画库 from PIL import ImageDraw # 字体库 from PIL import ImageFont # 图片库 from PIL import Image import cv2 # 导入上传文件夹配置 from mydjango.settings import UPLOAD_ROOT import os # 导入时间模块 import datetime    配置settings STATIC_URL = &#39;/static/&#39; STATICFILES_DIRS=[ os.path.join(BASE_DIR,&#39;static&#39;) ] #定义上传文件夹的路径 UPLOAD_ROOT = os.path.join(BASE_DIR,&#39;static/upload&#39;)    定义压缩图片和添加水印的函数. # 图片添加水印 def Wate_Upload(imgname): # 压缩图片 img = cv2.imread(&#39;./static/upload/&#39; + imgname) cv2.imwrite(&#39;./static/upload/&#39; + imgname, img, [cv2.</description>
    </item>
    
    <item>
      <title>微博三方登录</title>
      <link>https://blog.github.io/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</link>
      <pubDate>Tue, 28 Apr 2020 17:31:07 +0800</pubDate>
      
      <guid>https://blog.github.io/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</guid>
      <description>三方微博登录demo   使用微博账号登录微博开发平台
网址: https://open.weibo.com/
随便起个应用名称创建好应用
  进入应用,选择应用信息选择高级信息
填写你的授权回调页与取消授权回调页路由.两个写一样的就好
  授权验证
在web页面中给微博登录按钮绑定点击事件.引导用户导到下边的地址
https://api.weibo.com/oauth2/authorize?client_id=YOUR_CLIENT_ID&amp;amp;response_type=code&amp;amp;redirect_uri=YOUR_REGISTERED_REDIRECT_URI     client_id 对应你应用中的App Key     redirect_uri 对应高级设置中的回调页地址    methods: { //三方登录新浪 sina() { //拼接url let url = &#39;https://api.weibo.com/oauth2/authorize?client_id=1655382420&amp;amp;response_type=code&amp;amp;redirect_uri=http://127.0.0.1:8000/md_blog&#39;; //跳转 window.location.href = url; }, }    换取access token
https://api.weibo.com/oauth2/access_token?client_id=YOUR_CLIENT_ID&amp;amp;client_secret=YOUR_CLIENT_SECRET&amp;amp;grant_type=authorization_code&amp;amp;redirect_uri=YOUR_REGISTERED_REDIRECT_URI&amp;amp;code=CODE     client_id 对应你应用中的App Key     client_secret 对应你应用中的App Secret   grant_type authorization_code(固定参数)   code 回调页返回回来的code值    # 三方登录微博 def md_blog(request): # 接收微博返回来的code code = request.</description>
    </item>
    
    <item>
      <title>限制用户登录次数</title>
      <link>https://blog.github.io/%E9%99%90%E5%88%B6%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Sun, 26 Apr 2020 16:20:37 +0800</pubDate>
      
      <guid>https://blog.github.io/%E9%99%90%E5%88%B6%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%AC%A1%E6%95%B0/</guid>
      <description>登录次数过多限制登录demo 当用户密码输入次数过多时,限制用户的登录,一方面保护账号的安全,另一方面防止恶意登录. 下面提供两个版本,mysql与redis
mysql直接在表中增加字段flag,用户输入密码错误flag+1,判断这个数据如果大于5.就拦截请求,直接返回.
但是mysql在计算时间不如redis,会更繁琐一些.当然看业务需求,密码错误5次之后,必须更改密码,更改密码之后把flag字段清零.
或者用手机号登录,登录成功就把flag字段清零.
mysql: # 登录接口 class Login(APIView): def get(self, request): # mysql # 接收参数 username = request.GET.get(&#39;username&#39;) password = request.GET.get(&#39;password&#39;) # 查询数据 user = User.objects.filter(username=username).first() if user and user.flag &amp;lt; 5 and user.password == make_password(password): return Response({ &#39;code&#39;: 200, &#39;msg&#39;: &#39;登录成功&#39;, &#39;user&#39;: username, &#39;uid&#39;: user.id }) elif user and user.flag &amp;gt;= 5: return Response({ &#39;code&#39;: 400, &#39;msg&#39;: &#39;错误超过5次,请联系客服&#39; }) elif user and user.flag &amp;lt; 5 and user.</description>
    </item>
    
    <item>
      <title>图片验证码</title>
      <link>https://blog.github.io/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/</link>
      <pubDate>Thu, 23 Apr 2020 17:42:21 +0800</pubDate>
      
      <guid>https://blog.github.io/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/</guid>
      <description>图片验证码demo   导入需要的第三方库
# 导入类视图 from django.views import View # 导入redis数据库 import redis # 导入图片库 # 绘画库 from PIL import ImageDraw # 字体库 from PIL import ImageFont # 图片库 from PIL import Image # 随机库 import random # 文件流 import io    后端代码
建立连接redis对象
# 定义ip地址和端口 host = &amp;quot;localhost&amp;quot; port = 6379 # 定义连接对象 r = redis.Redis(host=host, port=port)    view逻辑
# 定义验证码类 class MyCode(View): # 定义随机颜色 def get_random_color(self): R = random.</description>
    </item>
    
    <item>
      <title>正则验证手机号</title>
      <link>https://blog.github.io/%E6%AD%A3%E5%88%99%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7/</link>
      <pubDate>Thu, 23 Apr 2020 17:39:03 +0800</pubDate>
      
      <guid>https://blog.github.io/%E6%AD%A3%E5%88%99%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7/</guid>
      <description>正则验证手机号demo   template中定义标签框架
手机号: &amp;lt;input type=&amp;quot;text&amp;quot; v-model=&amp;quot;Phone&amp;quot; oninput=&amp;quot;if(value.length&amp;gt;11)value=value.slice(0,11)&amp;quot; placeholder=&amp;quot;请输入您的手机号&amp;quot;/&amp;gt; &amp;lt;Button color=&amp;quot;blue&amp;quot; @click=&amp;quot;reg()&amp;quot;&amp;gt;注册&amp;lt;/Button&amp;gt;    data中定义我们需要的变量
data() { return { Phone: &#39;&#39; } },    methobs中定义方法
reg() { //判断用户是否输入 if (this.username === &#39;&#39; || this.password === &#39;&#39; || this.Phone === &#39;&#39;) { this.$Message(&#39;请检查输入&#39;); return false } else { //正则判断手机号 if (!(/^1[34578]\d{9}$/.test(this.Phone))) { this.$Message(&#39;手机号格式不正确&#39;); return false } else { this.axios.get(&#39; http://127.0.0.1:8000/register/&#39;, { params: { username: this.username, password: this.password, phone:this.</description>
    </item>
    
    <item>
      <title>中间件与装饰器</title>
      <link>https://blog.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Wed, 26 Dec 2018 00:29:41 -0600</pubDate>
      
      <guid>https://blog.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>Django自定义中间件 首先在settings.py文件中的MIDDLEWARE导入自定义的中间件类名 MIDDLEWARE = [ &#39;django.middleware.security.SecurityMiddleware&#39;, &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;, &#39;corsheaders.middleware.CorsMiddleware&#39;, ...... # 加载自定义中间件 文件夹名.文件名.类名 根据自己的路径来导入类名 &#39;myapp.md_user.MyMiddleWare&#39;  view视图文件中导入MIddlewareMimin 定义类 之后就可以根据自己的需求在对应的函数中写入逻辑 # 自定义中间件 from django.utils.deprecation import MiddlewareMixin class MyMiddleWare(MiddlewareMixin): # 请求之前 def process_request(self, request): pass # 模板渲染之前 def process_view(self, request, view_func, view_args, view_kwargs): pass # 请求之后 def process_response(self, request, response): return response $中间件的5种方法 1、process_request : 请求进来时,权限认证 。 2、process_view : 路由匹配之后,能够得到视图函数 3、process_exception : 异常时执行 4、process_template_responseprocess : 模板渲染时执行 5、process_response : 请求有响应时执行     装饰器 装饰器原理是函数嵌套,闭包运行.</description>
    </item>
    
  </channel>
</rss>