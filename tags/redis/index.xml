<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on NieMinghua-blog</title>
    <link>https://blog.github.io/tags/redis/</link>
    <description>Recent content in Redis on NieMinghua-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Apr 2020 16:20:37 +0800</lastBuildDate>
    
	<atom:link href="https://blog.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>限制用户登录次数</title>
      <link>https://blog.github.io/%E9%99%90%E5%88%B6%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%AC%A1%E6%95%B0/</link>
      <pubDate>Sun, 26 Apr 2020 16:20:37 +0800</pubDate>
      
      <guid>https://blog.github.io/%E9%99%90%E5%88%B6%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%AC%A1%E6%95%B0/</guid>
      <description>登录次数过多限制登录demo 当用户密码输入次数过多时,限制用户的登录,一方面保护账号的安全,另一方面防止恶意登录. 下面提供两个版本,mysql与redis
mysql直接在表中增加字段flag,用户输入密码错误flag+1,判断这个数据如果大于5.就拦截请求,直接返回.
但是mysql在计算时间不如redis,会更繁琐一些.当然看业务需求,密码错误5次之后,必须更改密码,更改密码之后把flag字段清零.
或者用手机号登录,登录成功就把flag字段清零.
mysql: # 登录接口 class Login(APIView): def get(self, request): # mysql # 接收参数 username = request.GET.get(&#39;username&#39;) password = request.GET.get(&#39;password&#39;) # 查询数据 user = User.objects.filter(username=username).first() if user and user.flag &amp;lt; 5 and user.password == make_password(password): return Response({ &#39;code&#39;: 200, &#39;msg&#39;: &#39;登录成功&#39;, &#39;user&#39;: username, &#39;uid&#39;: user.id }) elif user and user.flag &amp;gt;= 5: return Response({ &#39;code&#39;: 400, &#39;msg&#39;: &#39;错误超过5次,请联系客服&#39; }) elif user and user.flag &amp;lt; 5 and user.</description>
    </item>
    
    <item>
      <title>Django利用redis中的有序集合完成商品排行榜或点击量</title>
      <link>https://blog.github.io/django%E5%88%A9%E7%94%A8redis%E4%B8%AD%E7%9A%84%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E5%AE%8C%E6%88%90%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C%E6%A6%9C%E6%88%96%E7%82%B9%E5%87%BB%E9%87%8F/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.github.io/django%E5%88%A9%E7%94%A8redis%E4%B8%AD%E7%9A%84%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E5%AE%8C%E6%88%90%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C%E6%A6%9C%E6%88%96%E7%82%B9%E5%87%BB%E9%87%8F/</guid>
      <description>Redis 有序集合(sorted set) redis有序集合和集合一样,元素依旧是唯一的.但不用的是有序集合可以根绝key来做排序.
# 有序集合的使用 # 通过zadd来添加 r.zadd(&#39;myrank&#39;, {&#39;car&#39;: 30}) r.zadd(&#39;myrank&#39;, {&#39;phone&#39;: 100}) r.zadd(&#39;myrank&#39;, {&#39;gid&#39;: 20}) print(r.zrange(&#39;myrank&#39;, 0, -1, desc=True, withscores=True)) # zrange 遍历所有数据 # 起始与结束的位置 0和-1代表全部 # desc = true 降序排列 默认是正序 # withscores=True 打印key和value,否则只打印key &amp;gt;&amp;gt;&amp;gt;[(b&#39;car&#39;, 100.0), (b&#39;phone&#39;, 30.0), (b&#39;gid&#39;, 20.0)] # 修改操作 修改的数据与原数据累加 nwescore = r.zincrby(&#39;myrank&#39;,300,&#39;phone&#39;) # 累加前 &amp;gt;&amp;gt;&amp;gt;[(b&#39;gid&#39;, 20.0), (b&#39;car&#39;, 30.0), (b&#39;phone&#39;, 100.0)] #累加后 &amp;gt;&amp;gt;&amp;gt;[(b&#39;gid&#39;, 20.0), (b&#39;car&#39;, 30.0), (b&#39;phone&#39;, 400.0)]  redis累加的特性,天然的适用于商品的点击数量.以商品id为key,把value累加.这样点击数记录,而且有序排序,也可以轻松的完场排行榜的功能.
# 工具方法.获取排行榜前N名的数据 def get_top_n(num): # 获取redis中的排行榜数据 goods_click = r.</description>
    </item>
    
  </channel>
</rss>