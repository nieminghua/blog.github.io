<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on NieMinghua-blog</title>
    <link>https://blog.github.io/tags/django/</link>
    <description>Recent content in Django on NieMinghua-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Apr 2020 17:01:12 +0800</lastBuildDate>
    
	<atom:link href="https://blog.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django压缩图片并添加水印</title>
      <link>https://blog.github.io/django%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</link>
      <pubDate>Wed, 29 Apr 2020 17:01:12 +0800</pubDate>
      
      <guid>https://blog.github.io/django%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</guid>
      <description>压缩图片并添加水印demo   导入我们需要的库 # 导入图片库 # 绘画库 from PIL import ImageDraw # 字体库 from PIL import ImageFont # 图片库 from PIL import Image import cv2 # 导入上传文件夹配置 from mydjango.settings import UPLOAD_ROOT import os # 导入时间模块 import datetime    配置settings STATIC_URL = &#39;/static/&#39; STATICFILES_DIRS=[ os.path.join(BASE_DIR,&#39;static&#39;) ] #定义上传文件夹的路径 UPLOAD_ROOT = os.path.join(BASE_DIR,&#39;static/upload&#39;)    定义压缩图片和添加水印的函数. # 图片添加水印 def Wate_Upload(imgname): # 压缩图片 img = cv2.imread(&#39;./static/upload/&#39; + imgname) cv2.imwrite(&#39;./static/upload/&#39; + imgname, img, [cv2.</description>
    </item>
    
    <item>
      <title>中间件与装饰器</title>
      <link>https://blog.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Wed, 26 Dec 2018 00:29:41 -0600</pubDate>
      
      <guid>https://blog.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>Django自定义中间件 首先在settings.py文件中的MIDDLEWARE导入自定义的中间件类名 MIDDLEWARE = [ &#39;django.middleware.security.SecurityMiddleware&#39;, &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;, &#39;corsheaders.middleware.CorsMiddleware&#39;, ...... # 加载自定义中间件 文件夹名.文件名.类名 根据自己的路径来导入类名 &#39;myapp.md_user.MyMiddleWare&#39;  view视图文件中导入MIddlewareMimin 定义类 之后就可以根据自己的需求在对应的函数中写入逻辑 # 自定义中间件 from django.utils.deprecation import MiddlewareMixin class MyMiddleWare(MiddlewareMixin): # 请求之前 def process_request(self, request): pass # 模板渲染之前 def process_view(self, request, view_func, view_args, view_kwargs): pass # 请求之后 def process_response(self, request, response): return response $中间件的5种方法 1、process_request : 请求进来时,权限认证 。 2、process_view : 路由匹配之后,能够得到视图函数 3、process_exception : 异常时执行 4、process_template_responseprocess : 模板渲染时执行 5、process_response : 请求有响应时执行     装饰器 装饰器原理是函数嵌套,闭包运行.</description>
    </item>
    
    <item>
      <title>Django利用redis中的有序集合完成商品排行榜或点击量</title>
      <link>https://blog.github.io/django%E5%88%A9%E7%94%A8redis%E4%B8%AD%E7%9A%84%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E5%AE%8C%E6%88%90%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C%E6%A6%9C%E6%88%96%E7%82%B9%E5%87%BB%E9%87%8F/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.github.io/django%E5%88%A9%E7%94%A8redis%E4%B8%AD%E7%9A%84%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E5%AE%8C%E6%88%90%E5%95%86%E5%93%81%E6%8E%92%E8%A1%8C%E6%A6%9C%E6%88%96%E7%82%B9%E5%87%BB%E9%87%8F/</guid>
      <description>Redis 有序集合(sorted set) redis有序集合和集合一样,元素依旧是唯一的.但不用的是有序集合可以根绝key来做排序.
# 有序集合的使用 # 通过zadd来添加 r.zadd(&#39;myrank&#39;, {&#39;car&#39;: 30}) r.zadd(&#39;myrank&#39;, {&#39;phone&#39;: 100}) r.zadd(&#39;myrank&#39;, {&#39;gid&#39;: 20}) print(r.zrange(&#39;myrank&#39;, 0, -1, desc=True, withscores=True)) # zrange 遍历所有数据 # 起始与结束的位置 0和-1代表全部 # desc = true 降序排列 默认是正序 # withscores=True 打印key和value,否则只打印key &amp;gt;&amp;gt;&amp;gt;[(b&#39;car&#39;, 100.0), (b&#39;phone&#39;, 30.0), (b&#39;gid&#39;, 20.0)] # 修改操作 修改的数据与原数据累加 nwescore = r.zincrby(&#39;myrank&#39;,300,&#39;phone&#39;) # 累加前 &amp;gt;&amp;gt;&amp;gt;[(b&#39;gid&#39;, 20.0), (b&#39;car&#39;, 30.0), (b&#39;phone&#39;, 100.0)] #累加后 &amp;gt;&amp;gt;&amp;gt;[(b&#39;gid&#39;, 20.0), (b&#39;car&#39;, 30.0), (b&#39;phone&#39;, 400.0)]  redis累加的特性,天然的适用于商品的点击数量.以商品id为key,把value累加.这样点击数记录,而且有序排序,也可以轻松的完场排行榜的功能.
# 工具方法.获取排行榜前N名的数据 def get_top_n(num): # 获取redis中的排行榜数据 goods_click = r.</description>
    </item>
    
  </channel>
</rss>